# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from template_manager import TemplateManager
from PyQt5.QtWidgets import QTableWidgetItem
from template_manager import DataItem
from database_connection import DatabaseConnection
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QInputDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1013, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.templateTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.templateTabs.setObjectName("templateTabs")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.templateTabs.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.templateTabs.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.templateTabs)
        self.tableWorlLayout = QtWidgets.QVBoxLayout()
        self.tableWorlLayout.setObjectName("tableWorlLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.seatchByButton = QtWidgets.QPushButton(self.centralwidget)
        self.seatchByButton.setObjectName("seatchByButton")
        self.horizontalLayout_7.addWidget(self.seatchByButton)
        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout_7.addWidget(self.searchButton)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_7)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_3.setContentsMargins(0, -1, 0, 0)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.oneButton = QtWidgets.QPushButton(self.centralwidget)
        self.oneButton.setMaximumSize(QtCore.QSize(15, 16777215))
        self.oneButton.setObjectName("oneButton")
        self.verticalLayout_3.addWidget(self.oneButton, 0, QtCore.Qt.AlignRight)
        self.twoButton = QtWidgets.QPushButton(self.centralwidget)
        self.twoButton.setMaximumSize(QtCore.QSize(15, 16777215))
        self.twoButton.setObjectName("twoButton")
        self.verticalLayout_3.addWidget(self.twoButton, 0, QtCore.Qt.AlignRight)
        self.horizontalLayout_3.addLayout(self.verticalLayout_3)
        self.dellButton = QtWidgets.QPushButton(self.centralwidget)
        self.dellButton.setEnabled(True)
        self.dellButton.setMaximumSize(QtCore.QSize(20, 16777215))
        self.dellButton.setAutoFillBackground(False)
        self.dellButton.setAutoRepeat(False)
        self.dellButton.setObjectName("dellButton")
        self.horizontalLayout_3.addWidget(self.dellButton)
        self.tableWorlLayout.addLayout(self.horizontalLayout_3)
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setObjectName("listView")
        self.tableWorlLayout.addWidget(self.listView)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.addButton = QtWidgets.QPushButton(self.centralwidget)
        self.addButton.setObjectName("addButton")
        self.horizontalLayout_5.addWidget(self.addButton)
        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setObjectName("deleteButton")
        self.horizontalLayout_5.addWidget(self.deleteButton)
        self.editButton = QtWidgets.QPushButton(self.centralwidget)
        self.editButton.setObjectName("editButton")
        self.horizontalLayout_5.addWidget(self.editButton)
        self.tableWorlLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_2.addLayout(self.tableWorlLayout)
        self.calendarLayput = QtWidgets.QFrame(self.centralwidget)
        self.calendarLayput.setObjectName("calendarLayput")
        self.clendarLayout = QtWidgets.QVBoxLayout(self.calendarLayput)
        self.clendarLayout.setObjectName("clendarLayout")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.calendarLayput)
        self.calendarWidget.setObjectName("calendarWidget")
        self.clendarLayout.addWidget(self.calendarWidget)
        self.filterButton = QtWidgets.QPushButton(self.calendarLayput)
        self.filterButton.setObjectName("filterButton")
        self.clendarLayout.addWidget(self.filterButton)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.LabelAuthor = QtWidgets.QLabel(self.calendarLayput)
        self.LabelAuthor.setObjectName("LabelAuthor")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.LabelAuthor)
        self.LineEditAuthor = QtWidgets.QLineEdit(self.calendarLayput)
        self.LineEditAuthor.setObjectName("LineEditAuthor")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.LineEditAuthor)
        self.LabelName = QtWidgets.QLabel(self.calendarLayput)
        self.LabelName.setObjectName("LabelName")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.LabelName)
        self.LineEditName = QtWidgets.QLineEdit(self.calendarLayput)
        self.LineEditName.setObjectName("LineEditName")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.LineEditName)
        self.LabelGuest = QtWidgets.QLabel(self.calendarLayput)
        self.LabelGuest.setObjectName("LabelGuest")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.LabelGuest)
        self.LineEditGuest = QtWidgets.QLineEdit(self.calendarLayput)
        self.LineEditGuest.setObjectName("LineEditGuest")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.LineEditGuest)
        self.LabelPlace = QtWidgets.QLabel(self.calendarLayput)
        self.LabelPlace.setObjectName("LabelPlace")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.LabelPlace)
        self.LineEditPlace = QtWidgets.QLineEdit(self.calendarLayput)
        self.LineEditPlace.setObjectName("LineEditPlace")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.LineEditPlace)
        self.clendarLayout.addLayout(self.formLayout)
        self.horizontalLayout_2.addWidget(self.calendarLayput)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1013, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_4 = QtWidgets.QAction(MainWindow)
        self.action_4.setObjectName("action_4")
        self.action_5 = QtWidgets.QAction(MainWindow)
        self.action_5.setObjectName("action_5")
        self.action_6 = QtWidgets.QAction(MainWindow)
        self.action_6.setObjectName("action_6")
        self.actionDell = QtWidgets.QAction(MainWindow)
        self.actionDell.setObjectName("actionDell")
        self.action_7 = QtWidgets.QAction(MainWindow)
        self.action_7.setObjectName("action_7")
        self.menu.addAction(self.action)
        self.menu_2.addAction(self.action_2)
        self.menu_2.addAction(self.action_3)
        self.menu_2.addAction(self.action_4)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.toolBar.addAction(self.action_5)
        self.toolBar.addAction(self.action_6)
        self.toolBar.addAction(self.actionDell)
        self.toolBar.addAction(self.action_7)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Добавляем обработчик события для кнопки "Добавить"
        self.addButton.clicked.connect(MainWindow.addElement)

        self.filterButton.clicked.connect(self.filter_data)


        # Добавляем виджет QTabWidget
        self.tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.tabs.setObjectName("tabs")
        self.horizontalLayout_2.addWidget(self.tabs)

        # Соединяем сигнал "Открыть шаблон" с методом open_template
        self.action_5.triggered.connect(self.open_template)

        # Добавляем список для отслеживания открытых вкладок
        self.opened_tabs = []

        # Добавим список элементов данных
        self.data_items = [
            DataItem("Автор1", "Название1", "Гость1", "Место1"),
            DataItem("Автор2", "Название2", "Гость2", "Место2"),
            # Добавьте еще элементов, как требуется
        ]

        # Добавьте эту строку, чтобы создать атрибут current_user_group при инициализации
        self.current_user_group = 1  # Или установите значение в соответствии с вашими требованиями

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.templateTabs.setTabText(self.templateTabs.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.templateTabs.setTabText(self.templateTabs.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.seatchByButton.setText(_translate("MainWindow", "Поиск по"))
        self.searchButton.setText(_translate("MainWindow", "Поиск"))
        self.oneButton.setText(_translate("MainWindow", "1"))
        self.twoButton.setText(_translate("MainWindow", "2"))
        self.dellButton.setText(_translate("MainWindow", "D\n"
"e\n"
"l\n"
"l"))
        self.addButton.setText(_translate("MainWindow", "Добавить"))
        self.deleteButton.setText(_translate("MainWindow", "Удалить"))
        self.deleteButton.clicked.connect(self.delete_current_event)
        self.editButton.setText(_translate("MainWindow", "Редактировать"))
        self.filterButton.setText(_translate("MainWindow", "Фильтруется/Нет"))
        self.LabelAuthor.setText(_translate("MainWindow", "Автор"))
        self.LabelName.setText(_translate("MainWindow", "Название"))
        self.LabelGuest.setText(_translate("MainWindow", "Гость"))
        self.LabelPlace.setText(_translate("MainWindow", "Место"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.menu_2.setTitle(_translate("MainWindow", "Шаблоны"))
        self.menu_3.setTitle(_translate("MainWindow", "Выход"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.action.setText(_translate("MainWindow", "Сохранить как"))
        self.action_2.setText(_translate("MainWindow", "Создать шаблон"))
        self.action_3.setText(_translate("MainWindow", "Изменить шаблон"))
        self.action_4.setText(_translate("MainWindow", "Удалить шаблон"))
        #self.action_5.setText(_translate("MainWindow", "Открыть шаблон"))
        # Добавляем обработчик события для кнопки "Открыть шаблон"
        #self.action_5.triggered.connect(self.open_template)
        self.action_6.setText(_translate("MainWindow", "Фильтр"))
        self.actionDell.setText(_translate("MainWindow", "Dell"))
        # Добавьте эту строку для подключения метода к кнопке "Dell"
        self.dellButton.clicked.connect(self.delete_selected_row)
        self.dellButton.clicked.connect(self.remove_selected_row)

        self.action_7.setText(_translate("MainWindow", "Закрыть шаблон"))
        self.action_7.triggered.connect(self.close_current_tab)

        # Добавляем текст и соединение сигнала кнопки "Открыть шаблон"
        self.filterButton.setText(_translate("MainWindow", "Фильтр"))
        # Добавьте этот код для подключения метода filter_data к кнопке
        self.filterButton.clicked.connect(self.filter_data)
        self.filterButton.clicked.connect(self.filter_data)
        self.action_5.setText(_translate("MainWindow", "Открыть шаблон"))
        self.action_5.triggered.connect(self.open_template)

    def open_template(self):
        # Проверяем, что пользователь принадлежит к первой группе
        if self.current_user_group == 1:
            template_manager = TemplateManager(self)
            template_manager.open_template()
        else:
            QMessageBox.warning(self, "Недостаточно прав", "У вас нет прав на открытие шаблонов.")    

    def filter_data(self):
        print("Фильтрация данных: Метод filter_data вызван!")

        # Получите значения из полей фильтрации
        author = self.LineEditAuthor.text()
        name = self.LineEditName.text()
        guest = self.LineEditGuest.text()
        place = self.LineEditPlace.text()

        # Очистите таблицу перед добавлением новых данных
        model = QtGui.QStandardItemModel()
        self.listView.setModel(model)

        # Пройдемся по списку элементов данных и добавим соответствующие элементы в таблицу
        for item in self.data_items:
            if (
                author.lower() in item.author.lower()
                and name.lower() in item.name.lower()
                and guest.lower() in item.guest.lower()
                and place.lower() in item.place.lower()
            ):
                # Создаем строку данных и добавляем ее в таблицу
                data_str = f"{item.author}, {item.name}, {item.guest}, {item.place}"
                list_item = QtGui.QStandardItem(data_str)
                model.appendRow(list_item)

    # Добавьте этот метод в класс Ui_MainWindow
    def delete_selected_row(self):
        selected_index = self.listView.currentIndex()
        if selected_index.isValid():
            row = selected_index.row()
            model = self.listView.model()
            model.removeRow(row)
            # Дополнительно удалите данные из вашего списка данных (self.data_items)
            # Пример: del self.data_items[row]

    def remove_selected_row(self):
        selected_index = self.listView.selectedIndexes()
        if selected_index:
            row = selected_index[0].row()
            model = self.listView.model()
            model.removeRow(row)

    def close_current_tab(self):
        # Получаем индекс текущей вкладки
        current_tab_index = self.tabs.currentIndex()

        # Убеждаемся, что есть открытая вкладка для закрытия
        if current_tab_index != -1:
            # Закрываем текущую вкладку
            self.tabs.removeTab(current_tab_index)
  
    def delete_current_event(self):
        # Получите индекс выбранной строки
        selected_index = self.listView.currentIndex()

        # Убедитесь, что индекс действителен
        if selected_index.isValid():
            # Получите данные из модели для выбранной строки
            model = self.listView.model()
            item = model.itemFromIndex(selected_index)

            # Получите текст из элемента модели
            data_str = item.text()

            # Разбейте текст, чтобы получить ID события (предположим, что ID находится в начале строки)
            event_id = data_str.split(',')[0]

            # Передайте event_id в метод delete_event вашего DatabaseConnection
            db_connection = DatabaseConnection()
            db_connection.delete_event(event_id)

            # Обновите отображение списка после удаления записи
            self.filter_data()

    # def filter_records(self):
    #     try:
    #         # Подключаемся к базе данных
    #         db_connection = DatabaseConnection()
    #         db_connection.connect()

    #         # Определяем SQL-запрос для обновления статуса фильтрации записей
    #         query = "UPDATE events SET is_filtered_column = %s"

    #         # В зависимости от состояния фильтрации, устанавливаем значение
    #         filter_value = 1 if self.is_filtered else 0

    #         # Выполняем SQL-запрос
    #         db_connection.execute_query(query, (filter_value,))

    #         # Ваш код обновления записей в интерфейсе, если необходимо

    #     except Exception as e:
    #         # В случае ошибки выводим сообщение
    #         QMessageBox.critical(self, "Ошибка", f"Ошибка фильтрации записей: {str(e)}")

    #     finally:
    #         # Закрываем соединение с базой данных
    #         db_connection.close_connection()         

    def create_template(self):
        # Проверяем, что пользователь принадлежит к первой группе
        if self.current_user_group == 1:
            # Ваш код для создания шаблона
            template_name, ok_pressed = QInputDialog.getText(self, "Создание шаблона", "Введите имя шаблона:")
            if ok_pressed and template_name:
                # Здесь вы можете использовать template_name для создания нового шаблона
                print(f"Создан новый шаблон с именем: {template_name}")
        else:
            QMessageBox.warning(self, "Недостаточно прав", "У вас нет прав на создание шаблонов.")

    def edit_template(self):
        # Проверяем, что пользователь принадлежит к первой группе
        if self.current_user_group == 1:
            # Ваш код для редактирования шаблона
            selected_template, ok_pressed = QInputDialog.getItem(self, "Редактирование шаблона", "Выберите шаблон:",
                                                                 ["Шаблон 1", "Шаблон 2", "Шаблон 3"],
                                                                 current=0, editable=False)
            if ok_pressed and selected_template:
                # Здесь вы можете использовать selected_template для редактирования выбранного шаблона
                print(f"Отредактирован шаблон: {selected_template}")
        else:
            QMessageBox.warning(self, "Недостаточно прав", "У вас нет прав на редактирование шаблонов.")

    def delete_template(self):
        # Проверяем, что пользователь принадлежит к первой группе
        if self.current_user_group == 1:
            # Ваш код для удаления шаблона
            selected_template, ok_pressed = QInputDialog.getItem(self, "Удаление шаблона", "Выберите шаблон:",
                                                                 ["Шаблон 1", "Шаблон 2", "Шаблон 3"],
                                                                 current=0, editable=False)
            if ok_pressed and selected_template:
                # Здесь вы можете использовать selected_template для удаления выбранного шаблона
                print(f"Удален шаблон: {selected_template}")
        else:
            QMessageBox.warning(self, "Недостаточно прав", "У вас нет прав на удаление шаблонов.")   